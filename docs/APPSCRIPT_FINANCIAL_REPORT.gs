/**
 * APPSCRIPT CODE - Th√™m v√†o Google Apps Script
 * 
 * C√°c function m·ªõi c·∫ßn th√™m v√†o Apps Script ƒë·ªÉ h·ªó tr·ª£ t√≠nh nƒÉng b√°o c√°o t√†i ch√≠nh
 */

// ========================================
// UPDATE PAYMENT - C·∫≠p nh·∫≠t giao d·ªãch thanh to√°n
// ========================================

/**
 * C·∫≠p nh·∫≠t th√¥ng tin giao d·ªãch thanh to√°n
 * 
 * @param {Object} data - D·ªØ li·ªáu giao d·ªãch c·∫ßn c·∫≠p nh·∫≠t
 * @param {string} data.studentCode - M√£ h·ªçc vi√™n
 * @param {string} data.datePayment - Ng√†y thanh to√°n (DD/MM/YYYY)
 * @param {string} data.type - Lo·∫°i thanh to√°n (Le/Khoa)
 * @param {number} data.lesson - S·ªë bu·ªïi
 * @param {string} data.money - S·ªë ti·ªÅn
 * @param {string} data.note - Ghi ch√∫
 * @return {Object} - K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
function updatePayment(data) {
  try {
    Logger.log('üìù Updating payment for: ' + data.studentCode);
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const paymentSheet = ss.getSheetByName('DongHoc'); // T√™n sheet thanh to√°n
    
    if (!paymentSheet) {
      return {
        status: 'error',
        message: 'Kh√¥ng t√¨m th·∫•y sheet DongHoc'
      };
    }
    
    // Get all data
    const dataRange = paymentSheet.getDataRange();
    const values = dataRange.getValues();
    
    // Find header row (th∆∞·ªùng l√† row 3)
    const headerRow = 2; // Index 2 = row 3 in sheet
    const headers = values[headerRow];
    
    // Find column indexes
    const studentCodeCol = headers.indexOf('studentCode');
    const datePaymentCol = headers.indexOf('datePayment');
    const typeCol = headers.indexOf('type');
    const lessonCol = headers.indexOf('lesson');
    const moneyCol = headers.indexOf('money');
    const noteCol = headers.indexOf('note');
    
    if (studentCodeCol === -1 || datePaymentCol === -1) {
      return {
        status: 'error',
        message: 'Kh√¥ng t√¨m th·∫•y c·ªôt studentCode ho·∫∑c datePayment'
      };
    }
    
    // Find the row to update
    let rowIndex = -1;
    for (let i = headerRow + 1; i < values.length; i++) {
      if (values[i][studentCodeCol] === data.studentCode && 
          values[i][datePaymentCol] === data.datePayment) {
        rowIndex = i;
        break;
      }
    }
    
    if (rowIndex === -1) {
      return {
        status: 'error',
        message: 'Kh√¥ng t√¨m th·∫•y giao d·ªãch c·∫ßn c·∫≠p nh·∫≠t'
      };
    }
    
    // Update the row
    const actualRowNumber = rowIndex + 1; // Convert to 1-based index
    
    if (typeCol !== -1) {
      paymentSheet.getRange(actualRowNumber, typeCol + 1).setValue(data.type);
    }
    if (lessonCol !== -1) {
      paymentSheet.getRange(actualRowNumber, lessonCol + 1).setValue(data.lesson);
    }
    if (moneyCol !== -1) {
      paymentSheet.getRange(actualRowNumber, moneyCol + 1).setValue(data.money);
    }
    if (noteCol !== -1 && data.note) {
      paymentSheet.getRange(actualRowNumber, noteCol + 1).setValue(data.note);
    }
    
    Logger.log('‚úÖ Payment updated successfully');
    
    return {
      status: 'success',
      message: 'C·∫≠p nh·∫≠t giao d·ªãch th√†nh c√¥ng'
    };
    
  } catch (error) {
    Logger.log('‚ùå Error updating payment: ' + error.toString());
    return {
      status: 'error',
      message: 'L·ªói: ' + error.toString()
    };
  }
}

// ========================================
// DELETE PAYMENT - X√≥a giao d·ªãch thanh to√°n
// ========================================

/**
 * X√≥a giao d·ªãch thanh to√°n
 * 
 * @param {Object} data - D·ªØ li·ªáu giao d·ªãch c·∫ßn x√≥a
 * @param {string} data.studentCode - M√£ h·ªçc vi√™n
 * @param {string} data.datePayment - Ng√†y thanh to√°n (DD/MM/YYYY)
 * @return {Object} - K·∫øt qu·∫£ x√≥a
 */
function deletePayment(data) {
  try {
    Logger.log('üóëÔ∏è Deleting payment for: ' + data.studentCode);
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const paymentSheet = ss.getSheetByName('DongHoc'); // T√™n sheet thanh to√°n
    
    if (!paymentSheet) {
      return {
        status: 'error',
        message: 'Kh√¥ng t√¨m th·∫•y sheet DongHoc'
      };
    }
    
    // Get all data
    const dataRange = paymentSheet.getDataRange();
    const values = dataRange.getValues();
    
    // Find header row (th∆∞·ªùng l√† row 3)
    const headerRow = 2; // Index 2 = row 3 in sheet
    const headers = values[headerRow];
    
    // Find column indexes
    const studentCodeCol = headers.indexOf('studentCode');
    const datePaymentCol = headers.indexOf('datePayment');
    
    if (studentCodeCol === -1 || datePaymentCol === -1) {
      return {
        status: 'error',
        message: 'Kh√¥ng t√¨m th·∫•y c·ªôt studentCode ho·∫∑c datePayment'
      };
    }
    
    // Find the row to delete
    let rowIndex = -1;
    for (let i = headerRow + 1; i < values.length; i++) {
      if (values[i][studentCodeCol] === data.studentCode && 
          values[i][datePaymentCol] === data.datePayment) {
        rowIndex = i;
        break;
      }
    }
    
    if (rowIndex === -1) {
      return {
        status: 'error',
        message: 'Kh√¥ng t√¨m th·∫•y giao d·ªãch c·∫ßn x√≥a'
      };
    }
    
    // Delete the row
    const actualRowNumber = rowIndex + 1; // Convert to 1-based index
    paymentSheet.deleteRow(actualRowNumber);
    
    Logger.log('‚úÖ Payment deleted successfully');
    
    // Optional: Update KiemSoatBuoiHoc sheet
    // updateStudentLessonSummary(data.studentCode);
    
    return {
      status: 'success',
      message: 'X√≥a giao d·ªãch th√†nh c√¥ng'
    };
    
  } catch (error) {
    Logger.log('‚ùå Error deleting payment: ' + error.toString());
    return {
      status: 'error',
      message: 'L·ªói: ' + error.toString()
    };
  }
}

// ========================================
// MAIN HANDLER - Th√™m v√†o function doPost
// ========================================

/**
 * Th√™m c√°c case sau v√†o function doPost() hi·ªán t·∫°i:
 * 
 * case 'updatePayment':
 *   result = updatePayment(param);
 *   break;
 * 
 * case 'deletePayment':
 *   result = deletePayment(param);
 *   break;
 */

// ========================================
// HELPER FUNCTION - C·∫≠p nh·∫≠t t·ªïng bu·ªïi h·ªçc
// ========================================

/**
 * C·∫≠p nh·∫≠t t·ªïng s·ªë bu·ªïi h·ªçc trong sheet KiemSoatBuoiHoc
 * (Optional - G·ªçi sau khi x√≥a/c·∫≠p nh·∫≠t payment)
 * 
 * @param {string} studentCode - M√£ h·ªçc vi√™n
 */
function updateStudentLessonSummary(studentCode) {
  try {
    Logger.log('üîÑ Updating lesson summary for: ' + studentCode);
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const paymentSheet = ss.getSheetByName('DongHoc');
    const summarySheet = ss.getSheetByName('KiemSoatBuoiHoc');
    
    if (!paymentSheet || !summarySheet) {
      Logger.log('‚ö†Ô∏è Sheet not found');
      return;
    }
    
    // Calculate total from payments
    const paymentData = paymentSheet.getDataRange().getValues();
    const paymentHeaders = paymentData[2]; // Row 3
    const studentCodeColIndex = paymentHeaders.indexOf('studentCode');
    const lessonColIndex = paymentHeaders.indexOf('lesson');
    
    let totalLessons = 0;
    let paymentCount = 0;
    
    for (let i = 3; i < paymentData.length; i++) {
      if (paymentData[i][studentCodeColIndex] === studentCode) {
        const lessons = parseInt(paymentData[i][lessonColIndex]) || 0;
        totalLessons += lessons;
        paymentCount++;
      }
    }
    
    // Update summary sheet
    const summaryData = summarySheet.getDataRange().getValues();
    const summaryHeaders = summaryData[2]; // Row 3
    const summaryStudentCodeCol = summaryHeaders.indexOf('code');
    const tongSoBuoiCol = summaryHeaders.indexOf('tongSoBuoi');
    const lanDongTienCol = summaryHeaders.indexOf('lanDongTien');
    
    for (let i = 3; i < summaryData.length; i++) {
      if (summaryData[i][summaryStudentCodeCol] === studentCode) {
        const actualRow = i + 1;
        
        if (tongSoBuoiCol !== -1) {
          summarySheet.getRange(actualRow, tongSoBuoiCol + 1).setValue(totalLessons);
        }
        if (lanDongTienCol !== -1) {
          summarySheet.getRange(actualRow, lanDongTienCol + 1).setValue(paymentCount);
        }
        
        break;
      }
    }
    
    Logger.log('‚úÖ Summary updated: ' + totalLessons + ' lessons, ' + paymentCount + ' payments');
    
  } catch (error) {
    Logger.log('‚ùå Error updating summary: ' + error.toString());
  }
}

// ========================================
// TESTING
// ========================================

/**
 * Test function - Uncomment ƒë·ªÉ test
 */
/*
function testUpdatePayment() {
  const testData = {
    studentCode: 'HV001',
    datePayment: '20/10/2025',
    type: 'Khoa',
    lesson: 12,
    money: '2400000',
    note: 'Test update'
  };
  
  const result = updatePayment(testData);
  Logger.log(result);
}

function testDeletePayment() {
  const testData = {
    studentCode: 'HV001',
    datePayment: '20/10/2025'
  };
  
  const result = deletePayment(testData);
  Logger.log(result);
}
*/
